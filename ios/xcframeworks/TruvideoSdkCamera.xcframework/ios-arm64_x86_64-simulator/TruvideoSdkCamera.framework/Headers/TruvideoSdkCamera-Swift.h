#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
#ifndef TRUVIDEOSDKCAMERA_SWIFT_H
#define TRUVIDEOSDKCAMERA_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="TruvideoSdkCamera",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)












enum TruvideoSdkCameraFlashMode : NSInteger;
@class TruvideoSdkCameraMediaMode;
enum TruvideoSdkCameraOrientation : NSInteger;

/// A configuration object for setting up the AR Camera in <code>TruvideoSdkCamera</code>.
/// <code>TruvideoSdkARCameraConfiguration</code> allows you to customize the AR Camera’s behavior, including flash settings, capture mode,
/// and camera orientation.
/// <h2>Example Usage</h2>
/// \code
/// let arConfig = TruvideoSdkARCameraConfiguration(
///     flashMode: .auto,
///     mode: .videoAndPicture(videoMaxCount: 3, pictureMaxCount: 5, durationLimit: 15),
///     orientation: .portrait
/// )
///
/// \endcodeThis configuration can be passed to <code>presentTruvideoSdkARCameraView</code> to launch the AR Camera with the specified settings.
/// <h2>See Also</h2>
/// <ul>
///   <li>
///     <code>TruvideoSdkCameraFlashMode</code>
///   </li>
///   <li>
///     <code>TruvideoSdkCameraMediaMode</code>
///   </li>
///   <li>
///     <code>TruvideoSdkCameraOrientation</code>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC17TruvideoSdkCamera32TruvideoSdkARCameraConfiguration")
@interface TruvideoSdkARCameraConfiguration : NSObject
/// The flash mode setting for the AR Camera.
/// Determines whether the flash is on, off, or set to auto mode.
@property (nonatomic, readonly) enum TruvideoSdkCameraFlashMode flashMode;
/// The media capture mode for the AR Camera.
/// Defines whether the camera captures photos, videos, or both.
@property (nonatomic, readonly, strong) TruvideoSdkCameraMediaMode * _Nonnull mode;
/// The camera orientation used when capturing AR content.
/// Determines whether the camera operates in portrait or landscape mode.
@property (nonatomic, readonly) enum TruvideoSdkCameraOrientation orientation;
/// Instantiates a new <code>TruvideoSdkARCameraConfiguration</code> using static method syntax.
/// This provides a convenient way to create configurations without directly initializing an instance.
/// \param flashMode The desired flash setting (default: <code>.off</code>).
///
/// \param orientation The camera’s orientation.
///
/// \param mode The media capture mode (default: <code>.videoAndPicture()</code>).
///
///
/// returns:
/// A new <code>TruvideoSdkARCameraConfiguration</code> instance.
+ (TruvideoSdkARCameraConfiguration * _Nonnull)instantiateWith:(enum TruvideoSdkCameraFlashMode)flashMode orientation:(enum TruvideoSdkCameraOrientation)orientation mode:(TruvideoSdkCameraMediaMode * _Nonnull)mode SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIApplication;
@class UIWindow;

/// Defines the application delegate for handling camera-related configurations.
/// <code>TruvideoSdkCameraAppDelegate</code> extends <code>UIApplicationDelegate</code> and provides control over <em>interface orientation lock</em> settings.
/// <h2>Overview</h2>
/// This protocol is responsible for:
/// <ul>
///   <li>
///     <em>Managing the orientation lock</em> for the camera.
///   </li>
///   <li>
///     <em>Defining supported interface orientations</em> for the application.
///   </li>
/// </ul>
/// <h2>Example Usage</h2>
/// \code
/// class AppDelegate: UIResponder, TruvideoSdkCameraAppDelegate {
///     var orientationLock: UIInterfaceOrientationMask = .portrait
///
///     func application(
///         _ application: UIApplication,
///         supportedInterfaceOrientationsFor window: UIWindow?
///     ) -> UIInterfaceOrientationMask {
///         return orientationLock
///     }
/// }
///
/// \endcode
SWIFT_PROTOCOL("_TtP17TruvideoSdkCamera28TruvideoSdkCameraAppDelegate_")
@protocol TruvideoSdkCameraAppDelegate <UIApplicationDelegate>
/// The current orientation lock for the application.
@property (nonatomic) UIInterfaceOrientationMask orientationLock;
/// Determines the supported interface orientations for the application.
/// This method allows the app to specify <em>which orientations</em> are permitted for a given window.
/// \param application The running application instance.
///
/// \param window The main application window.
///
///
/// returns:
/// A <code>UIInterfaceOrientationMask</code> specifying the supported orientations.
- (UIInterfaceOrientationMask)application:(UIApplication * _Nonnull)application supportedInterfaceOrientationsForWindow:(UIWindow * _Nullable)window SWIFT_WARN_UNUSED_RESULT;
@end

enum TruvideoSdkCameraLensFacing : NSInteger;
@class NSString;
enum TruvideoSdkCameraImageFormat : NSInteger;
@class TruvideoSdkCameraResolution;

/// A configuration object for setting up the camera in <code>TruvideoSdkCamera</code>.
/// <code>TruvideoSdkCameraConfiguration</code> allows developers to customize the camera’s behavior, including <em>lens selection, flash settings, orientation, resolution management, and media output</em>.
/// <h2>Example Usage</h2>
/// \code
/// let cameraConfig = TruvideoSdkCameraConfiguration(
///     lensFacing: .back,
///     flashMode: .auto,
///     orientation: .portrait,
///     outputPath: "media_output.mp4",
///     frontResolutions: [],
///     frontResolution: nil,
///     backResolutions: [],
///     backResolution: nil,
///     mode: .videoOnly
/// )
///
/// \endcodeThis configuration can be passed to <code>presentTruvideoSdkCameraView</code> to launch the camera with the specified settings.
/// note:
/// If no orientation is provided, the default device orientation will be used.
/// <h2>See Also</h2>
/// <ul>
///   <li>
///     <code>TruvideoSdkCameraLensFacing</code>
///   </li>
///   <li>
///     <code>TruvideoSdkCameraFlashMode</code>
///   </li>
///   <li>
///     <code>TruvideoSdkCameraOrientation</code>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC17TruvideoSdkCamera30TruvideoSdkCameraConfiguration")
@interface TruvideoSdkCameraConfiguration : NSObject
/// The selected camera lens facing mode.
/// Determines whether the <em>front</em> or <em>rear</em> camera is used for media capture.
@property (nonatomic, readonly) enum TruvideoSdkCameraLensFacing lensFacing;
/// The flash mode setting for the camera.
/// Determines whether the <em>flash is enabled or disabled</em> during capture.
@property (nonatomic, readonly) enum TruvideoSdkCameraFlashMode flashMode;
/// The camera orientation used when capturing media.
/// Specifies whether the camera operates in <em>portrait or landscape mode</em>.
@property (nonatomic, readonly) enum TruvideoSdkCameraOrientation orientation;
/// The output file path where the recorded media will be saved.
/// Defines the storage location of the <em>captured photos or recorded videos</em>.
@property (nonatomic, readonly, copy) NSString * _Nonnull outputPath;
/// Defines the camera’s capture mode.
/// Determines whether the camera captures <em>photos, videos, or both</em>.
@property (nonatomic, readonly, strong) TruvideoSdkCameraMediaMode * _Nonnull mode;
/// Defines the camera’s capture mode.
/// Determines whether the camera captures <em>photos, videos, or both</em>.
@property (nonatomic) BOOL isHighResolutionPhotoEnabled;
/// Defines the camera’s UI
/// Determines whether the camera will be presented with the new or legacy UI design
@property (nonatomic) BOOL isNewLayoutEnabled;
/// Defines the camera’s photo output file format
/// Determines wether the output file format is <em>png or jpeg</em>
@property (nonatomic) enum TruvideoSdkCameraImageFormat imageFormat;
/// Defines behavior when moving to background
/// Pauses the the recording when moving to background and concatenate them at the end using FFMPEG
@property (nonatomic) BOOL pauseVideoWhenMovingToBackground;
/// Instantiates a new <code>TruvideoSdkCameraConfiguration</code> using static method syntax.
///
/// returns:
/// A new <code>TruvideoSdkCameraConfiguration</code> instance.
+ (TruvideoSdkCameraConfiguration * _Nonnull)instantiateWith:(enum TruvideoSdkCameraLensFacing)lensFacing flashMode:(enum TruvideoSdkCameraFlashMode)flashMode orientation:(enum TruvideoSdkCameraOrientation)orientation outputPath:(NSString * _Nonnull)outputPath frontResolutions:(NSArray<TruvideoSdkCameraResolution *> * _Nonnull)frontResolutions frontResolution:(TruvideoSdkCameraResolution * _Nullable)frontResolution backResolutions:(NSArray<TruvideoSdkCameraResolution *> * _Nonnull)backResolutions backResolution:(TruvideoSdkCameraResolution * _Nullable)backResolution mode:(TruvideoSdkCameraMediaMode * _Nonnull)mode imageFormat:(enum TruvideoSdkCameraImageFormat)imageFormat SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class TruvideoSdkCameraInformation;

/// Defines the delegate responsible for retrieving camera information.
/// The <code>TruvideoSdkCameraDelegate</code> allows applications to fetch camera details, such as available lenses,
/// supported resolutions, and hardware capabilities.
/// <h2>Example Usage</h2>
/// \code
/// let cameraInfo = TruvideoSdkCameraProvider.shared.camera.getTruvideoSdkCameraInformation()
///
/// \endcode
SWIFT_PROTOCOL("_TtP17TruvideoSdkCamera25TruvideoSdkCameraDelegate_")
@protocol TruvideoSdkCameraDelegate
/// Retrieves all available camera information for both <em>front</em> and <em>back</em> cameras.
///
/// returns:
/// A <code>TruvideoSdkCameraInformation</code> object containing detailed camera specifications.
- (TruvideoSdkCameraInformation * _Nonnull)getTruvideoSdkCameraInformation SWIFT_WARN_UNUSED_RESULT;
@end


/// Represents a camera device available on the system.
/// <code>TruvideoSdkCameraDevice</code> provides details about a specific camera, including its <em>ID, lens direction, supported resolutions, flash availability, and sensor orientation</em>.
/// <h2>Example Usage</h2>
/// \code
/// let backCamera = TruvideoSdkCameraDevice(
///     id: "com.truvideo.backcamera",
///     lensFacing: .back,
///     resolutions: [TruvideoSdkCameraResolution(width: 1920, height: 1080)],
///     withFlash: true,
///     isTapToFocusEnabled: true,
///     sensorOrientation: 90
/// )
///
/// \endcode
SWIFT_CLASS("_TtC17TruvideoSdkCamera23TruvideoSdkCameraDevice")
@interface TruvideoSdkCameraDevice : NSObject
/// The unique identifier of the camera device.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The lens direction of the camera.
/// Specifies whether the camera is <em>front-facing</em> or <em>back-facing</em>.
@property (nonatomic, readonly) enum TruvideoSdkCameraLensFacing lensFacing;
/// The list of supported resolutions for this camera device.
/// Each resolution represents a width-height pair that defines the camera’s image capture capabilities.
@property (nonatomic, readonly, copy) NSArray<TruvideoSdkCameraResolution *> * _Nonnull resolutions;
/// Indicates whether the camera device has a built-in flash.
@property (nonatomic, readonly) BOOL withFlash;
/// Indicates whether the camera supports tap-to-focus functionality.
@property (nonatomic, readonly) BOOL isTapToFocusEnabled;
/// The sensor orientation of the camera, in degrees.
/// Represents the natural orientation of the camera sensor relative to the device’s display.
@property (nonatomic, readonly) NSInteger sensorOrientation;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Defines the flash mode settings for the camera.
/// This enum specifies whether the camera <em>flash is enabled or disabled</em>.
/// <h2>Available Values</h2>
/// <ul>
///   <li>
///     <code>off</code>: <em>Flash is disabled</em>.
///   </li>
///   <li>
///     <code>on</code>: <em>Flash is always enabled</em>.
///   </li>
/// </ul>
/// <h2>Example Usage</h2>
/// \code
/// let cameraConfig = TruvideoSdkCameraConfiguration(
///     flashMode: .on
/// )
///
/// \endcode
typedef SWIFT_ENUM(NSInteger, TruvideoSdkCameraFlashMode, open) {
/// Flash is disabled.
  TruvideoSdkCameraFlashModeOff = 0,
/// Flash is always enabled.
  TruvideoSdkCameraFlashModeOn = 1,
};

/// Defines the output photo’s file format.
/// This enum specifies whether the photo output file format is <em>png or jpeg</em>.
/// <h2>Available Values</h2>
/// <ul>
///   <li>
///     <code>png</code>: <em>Output file format is set to png</em>.
///   </li>
///   <li>
///     <code>jpeg</code>: <em>Output file format is set to jpeg</em>.
///   </li>
/// </ul>
/// <h2>Example Usage</h2>
/// \code
/// let cameraConfig = TruvideoSdkCameraConfiguration(
///     imageFormat: .png
/// )
///
/// \endcode
typedef SWIFT_ENUM(NSInteger, TruvideoSdkCameraImageFormat, open) {
  TruvideoSdkCameraImageFormatJpeg = 0,
  TruvideoSdkCameraImageFormatPng = 1,
};


/// Provides detailed information about available camera devices.
/// <code>TruvideoSdkCameraInformation</code> contains references to the <em>front-facing</em> and <em>back-facing</em> cameras available on the device.
/// <h2>Example Usage</h2>
/// \code
/// let cameraInfo = TruvideoSdkCameraInformation(frontCamera: frontDevice, backCamera: backDevice)
/// print("Front Camera ID: \(cameraInfo.frontCamera?.id ?? "N/A")")
///
/// \endcode
SWIFT_CLASS("_TtC17TruvideoSdkCamera28TruvideoSdkCameraInformation")
@interface TruvideoSdkCameraInformation : NSObject
/// The front-facing camera device, if available.
@property (nonatomic, readonly, strong) TruvideoSdkCameraDevice * _Nullable frontCamera;
/// The back-facing camera device, if available.
@property (nonatomic, readonly, strong) TruvideoSdkCameraDevice * _Nullable backCamera;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Defines the interface for accessing <code>TruvideoSdkCamera</code> functionalities.
/// The <code>TruvideoSdkCameraInterface</code> provides access to core camera functionality, including
/// retrieving available cameras and configuring the SDK.
/// <h2>Example Usage</h2>
/// \code
/// let sdkCamera = TruvideoSdkCameraProvider.shared
/// sdkCamera.configureTruvideoSdkAppDelegate(myAppDelegate)
///
/// \endcode
SWIFT_PROTOCOL("_TtP17TruvideoSdkCamera26TruvideoSdkCameraInterface_")
@protocol TruvideoSdkCameraInterface
/// Provides the main camera delegate, responsible for handling SDK camera operations.
@property (nonatomic, readonly, strong) id <TruvideoSdkCameraDelegate> _Nonnull camera;
/// Configures the Truvideo SDK with an application delegate.
/// This method should be called during application setup to <em>initialize the camera SDK</em>.
/// \param appDelegate The <code>TruvideoSdkCameraAppDelegate</code> instance handling app-wide camera events.
///
- (void)configureTruvideoSdkAppDelegate:(id <TruvideoSdkCameraAppDelegate> _Nonnull)appDelegate;
@end

/// Defines the camera lens direction used for capturing media.
/// This enum specifies whether the camera is using the <em>front-facing</em> or <em>back-facing</em> lens.
/// <h2>Available Values</h2>
/// <ul>
///   <li>
///     <code>back</code>: Uses the <em>rear-facing</em> camera.
///   </li>
///   <li>
///     <code>front</code>: Uses the <em>front-facing</em> camera (selfie mode).
///   </li>
/// </ul>
/// <h2>Example Usage</h2>
/// \code
/// let cameraConfig = TruvideoSdkCameraConfiguration(
///     lensFacing: .back,
///     flashMode: .off,
///     orientation: .portrait,
///     outputPath: "video_output.mp4",
///     frontResolutions: [],
///     frontResolution: nil,
///     backResolutions: [],
///     backResolution: nil,
///     mode: .videoOnly
/// )
///
/// \endcode
typedef SWIFT_ENUM(NSInteger, TruvideoSdkCameraLensFacing, open) {
/// Uses the rear-facing camera.
  TruvideoSdkCameraLensFacingBack = 0,
/// Uses the front-facing camera (selfie mode).
  TruvideoSdkCameraLensFacingFront = 1,
};

enum TruvideoSdkCameraMediaType : NSInteger;

/// A class representing a media file captured by the Truvideo SDK camera.
/// <code>TruvideoSdkCameraMedia</code> stores details about recorded videos or captured photos,
/// including their file paths, timestamps, media type, camera lens information, orientation, resolution,
/// and duration. It conforms to <code>Encodable</code> to allow JSON serialization.
/// note:
/// This class is designed to work with Objective-C (<code>@objc</code>) and Swift.
SWIFT_CLASS("_TtC17TruvideoSdkCamera22TruvideoSdkCameraMedia")
@interface TruvideoSdkCameraMedia : NSObject
/// The timestamp when the media was created.
@property (nonatomic, readonly) double createdAt;
/// The file path where the media is stored.
@property (nonatomic, readonly, copy) NSString * _Nonnull filePath;
/// The type of media (e.g., video clip or photo).
@property (nonatomic, readonly) enum TruvideoSdkCameraMediaType type;
/// The camera lens facing direction when the media was captured.
@property (nonatomic, readonly) enum TruvideoSdkCameraLensFacing cameraLensFacing;
/// The orientation (rotation) of the camera when the media was captured.
@property (nonatomic, readonly) enum TruvideoSdkCameraOrientation rotation;
/// The resolution of the captured media.
@property (nonatomic, readonly, strong) TruvideoSdkCameraResolution * _Nonnull resolution;
/// The duration of the media in milliseconds.
/// note:
/// This is applicable only for video clips.
@property (nonatomic, readonly) int64_t duration;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSNumber;

SWIFT_CLASS("_TtC17TruvideoSdkCamera26TruvideoSdkCameraMediaMode")
@interface TruvideoSdkCameraMediaMode : NSObject
+ (TruvideoSdkCameraMediaMode * _Nonnull)NSVideoAndPictureWithVideoCount:(NSNumber * _Nullable)videoCount pictureCount:(NSNumber * _Nullable)pictureCount videoDuration:(NSNumber * _Nullable)videoDuration SWIFT_WARN_UNUSED_RESULT;
+ (TruvideoSdkCameraMediaMode * _Nonnull)NSSingleVideoWithVideoDuration:(NSNumber * _Nullable)videoDuration SWIFT_WARN_UNUSED_RESULT;
+ (TruvideoSdkCameraMediaMode * _Nonnull)NSSinglePicture SWIFT_WARN_UNUSED_RESULT;
+ (TruvideoSdkCameraMediaMode * _Nonnull)NSSingleVideoOrPictureWithVideoDuration:(NSNumber * _Nullable)videoDuration SWIFT_WARN_UNUSED_RESULT;
+ (TruvideoSdkCameraMediaMode * _Nonnull)NSVideoWithVideoCount:(NSNumber * _Nullable)videoCount videoDuration:(NSNumber * _Nullable)videoDuration SWIFT_WARN_UNUSED_RESULT;
+ (TruvideoSdkCameraMediaMode * _Nonnull)NSPictureWithPictureCount:(NSNumber * _Nullable)pictureCount SWIFT_WARN_UNUSED_RESULT;
+ (TruvideoSdkCameraMediaMode * _Nonnull)NSVideoAndPictureWithMediaCount:(NSNumber * _Nonnull)mediaCount videoDuration:(NSNumber * _Nullable)videoDuration SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// An enumeration representing the different media types supported by the Truvideo SDK camera.
/// <code>TruvideoSdkCameraMediaType</code> conforms to <code>Codable</code> and <code>RawRepresentable</code>, allowing it to be
/// encoded and decoded from JSON. The raw values are stored as <code>String</code> representations.
typedef SWIFT_ENUM(NSInteger, TruvideoSdkCameraMediaType, open) {
/// The media type representing a recorded video clip.
  TruvideoSdkCameraMediaTypeClip = 0,
/// The media type representing a captured photo.
  TruvideoSdkCameraMediaTypePhoto = 1,
};

/// Defines the camera orientation for media capture.
/// This enum specifies whether the camera operates in <em>portrait or landscape mode</em>.
/// <h2>Available Values</h2>
/// <ul>
///   <li>
///     <code>portrait</code>: <em>Upright portrait mode</em>.
///   </li>
///   <li>
///     <code>landscapeLeft</code>: <em>Landscape mode with the device rotated left</em>.
///   </li>
///   <li>
///     <code>landscapeRight</code>: <em>Landscape mode with the device rotated right</em>.
///   </li>
///   <li>
///     <code>portraitReverse</code>: <em>Upside-down portrait mode</em>.
///   </li>
/// </ul>
/// <h2>Automatic Orientation Detection</h2>
/// If no orientation is explicitly set, the system will determine the <em>current device orientation</em>.
/// \code
/// let orientation = TruvideoSdkCameraOrientation.currentOrientation
///
/// \endcode
typedef SWIFT_ENUM(NSInteger, TruvideoSdkCameraOrientation, open) {
/// Upright portrait mode.
  TruvideoSdkCameraOrientationPortrait = 0,
/// Landscape mode with the device rotated left.
  TruvideoSdkCameraOrientationLandscapeLeft = 1,
/// Landscape mode with the device rotated right.
  TruvideoSdkCameraOrientationLandscapeRight = 2,
/// Upside-down portrait mode.
  TruvideoSdkCameraOrientationPortraitReverse = 3,
};


/// Provides a shared instance for accessing <code>TruvideoSdkCamera</code> functionalities.
/// <code>TruvideoSdkCameraProvider</code> acts as a singleton, offering a centralized way to access the <em>Truvideo Camera SDK</em>.
/// <h2>Example Usage</h2>
/// \code
/// let cameraInstance = TruvideoSdkCameraProvider.shared
/// let cameraInfo = cameraInstance.getTruvideoSdkCameraInformation()
///
/// \endcode
SWIFT_CLASS("_TtC17TruvideoSdkCamera25TruvideoSdkCameraProvider")
@interface TruvideoSdkCameraProvider : NSObject
/// The shared instance for accessing <code>TruvideoSdkCamera</code> functionalities.
/// This instance provides access to all SDK camera features.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) id <TruvideoSdkCameraInterface> _Nonnull shared;)
+ (id <TruvideoSdkCameraInterface> _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17TruvideoSdkCamera27TruvideoSdkCameraResolution")
@interface TruvideoSdkCameraResolution : NSObject
@property (nonatomic, readonly) int32_t width;
@property (nonatomic, readonly) int32_t height;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A result of the recording session.
SWIFT_CLASS("_TtC17TruvideoSdkCamera23TruvideoSdkCameraResult")
@interface TruvideoSdkCameraResult : NSObject
/// The media recorded during the session.
@property (nonatomic, readonly, copy) NSArray<TruvideoSdkCameraMedia *> * _Nonnull media;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum TruvideoSdkCameraScannerCodeFormat : NSInteger;

/// Represents the result of a barcode or QR code scan.
/// The <code>TruvideoSdkCameraScannerCode</code> class contains <em>raw barcode data</em> and its associated <em>format type</em>.
/// <h2>Overview</h2>
/// When a barcode or QR code is scanned using the <em>Truvideo Scanner Camera</em>, this class stores:
/// <ul>
///   <li>
///     The <em>scanned code’s data</em> (<code>data</code>)
///   </li>
///   <li>
///     The <em>format of the scanned barcode</em> (<code>format</code>)
///   </li>
/// </ul>
/// <h2>Example Usage</h2>
/// \code
/// let scannedCode = TruvideoSdkCameraScannerCode(data: "123456789", format: .codeQR)
/// print("Scanned Data: \(scannedCode.data)")
/// print("Format: \(scannedCode.format)")
///
/// \endcode
SWIFT_CLASS("_TtC17TruvideoSdkCamera28TruvideoSdkCameraScannerCode")
@interface TruvideoSdkCameraScannerCode : NSObject
/// The raw data extracted from the scanned barcode.
@property (nonatomic, readonly, copy) NSString * _Nonnull data;
/// The type of barcode that was scanned.
@property (nonatomic, readonly) enum TruvideoSdkCameraScannerCodeFormat format;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Defines the supported barcode and QR code formats for the scanner.
/// <code>TruvideoSdkCameraScannerCodeFormat</code> provides the available barcode types that the <em>Truvideo Scanner Camera</em> can detect.
/// <h2>Supported Formats</h2>
/// <ul>
///   <li>
///     <code>code39</code>: <em>Code-39 barcode</em> (commonly used in logistics and inventory systems)
///   </li>
///   <li>
///     <code>code93</code>: <em>Code-93 barcode</em> (an extended version of Code-39 with higher data density)
///   </li>
///   <li>
///     <code>codeQR</code>: <em>QR Code</em> (widely used for mobile transactions, payments, and URLs)
///   </li>
///   <li>
///     <code>dataMatrix</code>: <em>DataMatrix Code</em> (used in packaging, manufacturing, and tracking applications)
///   </li>
/// </ul>
/// <h2>Example Usage</h2>
/// \code
/// let scannerConfig = TruvideoSdkScannerCameraConfiguration(
///     flashMode: .auto,
///     codeFormats: [.codeQR, .dataMatrix]
/// )
///
/// \endcode
typedef SWIFT_ENUM(NSInteger, TruvideoSdkCameraScannerCodeFormat, open) {
/// Code-39 barcode format.
  TruvideoSdkCameraScannerCodeFormatCode39 = 0,
/// Code-93 barcode format.
  TruvideoSdkCameraScannerCodeFormatCode93 = 1,
/// QR Code format.
  TruvideoSdkCameraScannerCodeFormatCodeQR = 2,
/// DataMatrix barcode format.
  TruvideoSdkCameraScannerCodeFormatDataMatrix = 3,
};


/// Configuration settings for the <em>Truvideo Scanner Camera</em>.
/// This class allows developers to customize <em>flash mode, orientation, supported barcode types, and validation rules</em>.
/// <h2>Example Usage</h2>
/// \code
/// let scannerConfig = TruvideoSdkScannerCameraConfiguration(
///     flashMode: .auto,
///     orientation: .portrait,
///     codeFormats: [.codeQR, .dataMatrix],
///     autoClose: true
/// )
///
/// \endcode
SWIFT_CLASS("_TtC17TruvideoSdkCamera37TruvideoSdkScannerCameraConfiguration")
@interface TruvideoSdkScannerCameraConfiguration : NSObject
/// Specifies whether the <em>flash</em> is enabled during scanning.
@property (nonatomic, readonly) enum TruvideoSdkCameraFlashMode flashMode;
/// Defines the <em>camera orientation</em> during scanning.
@property (nonatomic, readonly) enum TruvideoSdkCameraOrientation orientation;
/// Determines whether the scanner <em>automatically closes</em> after a successful scan.
@property (nonatomic, readonly) BOOL autoClose;
/// Creates a scanner configuration with default settings.
/// \param flashMode The desired flash mode.
///
/// \param orientation The camera orientation.
///
/// \param autoClose Whether to automatically close after a scan.
///
///
/// returns:
/// A new scanner configuration instance.
+ (TruvideoSdkScannerCameraConfiguration * _Nonnull)instantiateWith:(enum TruvideoSdkCameraFlashMode)flashMode orientation:(enum TruvideoSdkCameraOrientation)orientation autoClose:(BOOL)autoClose SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end










@interface UIViewController (SWIFT_EXTENSION(TruvideoSdkCamera))
/// Presents the Scanner Camera view in full-screen mode.
/// This method displays the <em>TruvideoSdkScannerCamera</em>, allowing users to scan barcodes and QR codes.
/// \param preset A <code>TruvideoSdkCameraConfiguration</code> object that defines the configuration for the camera.
///
/// \param onComplete A callback function that receives a <code>TruvideoSdkCameraScannerCode</code> containing the scanned barcode data.
///
- (void)presentTruvideoSdkScannerCameraViewWithPreset:(TruvideoSdkScannerCameraConfiguration * _Nonnull)preset onComplete:(void (^ _Nonnull)(TruvideoSdkCameraScannerCode * _Nullable))onComplete;
@end


@interface UIViewController (SWIFT_EXTENSION(TruvideoSdkCamera))
/// Presents the Standard Camera view in full-screen mode.
/// This method displays the <em>TruvideoSdkCamera</em>, allowing users to <em>capture photos and record videos</em> based on the provided
/// camera configuration.
/// \param preset A <code>TruvideoSdkCameraConfiguration</code> object that defines the configuration for the camera.
///
/// \param onComplete A callback function that receives a <code>TruvideoSdkCameraResult</code> containing captured media.
///
- (void)presentTruvideoSdkCameraViewWithPreset:(TruvideoSdkCameraConfiguration * _Nonnull)preset onComplete:(void (^ _Nonnull)(TruvideoSdkCameraResult * _Nonnull))onComplete;
@end


@interface UIViewController (SWIFT_EXTENSION(TruvideoSdkCamera))
/// Presents the AR camera view over the full screen.
/// The camera view is presented <em>modally in full screen</em>, and once the session ends, the result is passed back to the caller.
/// \param preset A <code>TruvideoSdkARCameraConfiguration</code> object containing the AR camera configuration.
///
/// \param onComplete A callback function that receives a <code>TruvideoSdkCameraResult</code> containing captured media.
///
- (void)presentTruvideoSdkARCameraViewWithPreset:(TruvideoSdkARCameraConfiguration * _Nonnull)preset onComplete:(void (^ _Nonnull)(TruvideoSdkCameraResult * _Nonnull))onComplete;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
#ifndef TRUVIDEOSDKCAMERA_SWIFT_H
#define TRUVIDEOSDKCAMERA_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="TruvideoSdkCamera",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)












enum TruvideoSdkCameraFlashMode : NSInteger;
@class TruvideoSdkCameraMediaMode;
enum TruvideoSdkCameraOrientation : NSInteger;

/// A configuration object for setting up the AR Camera in <code>TruvideoSdkCamera</code>.
/// <code>TruvideoSdkARCameraConfiguration</code> allows you to customize the AR Camera’s behavior, including flash settings, capture mode,
/// and camera orientation.
/// <h2>Example Usage</h2>
/// \code
/// let arConfig = TruvideoSdkARCameraConfiguration(
///     flashMode: .auto,
///     mode: .videoAndPicture(videoMaxCount: 3, pictureMaxCount: 5, durationLimit: 15),
///     orientation: .portrait
/// )
///
/// \endcodeThis configuration can be passed to <code>presentTruvideoSdkARCameraView</code> to launch the AR Camera with the specified settings.
/// <h2>See Also</h2>
/// <ul>
///   <li>
///     <code>TruvideoSdkCameraFlashMode</code>
///   </li>
///   <li>
///     <code>TruvideoSdkCameraMediaMode</code>
///   </li>
///   <li>
///     <code>TruvideoSdkCameraOrientation</code>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC17TruvideoSdkCamera32TruvideoSdkARCameraConfiguration")
@interface TruvideoSdkARCameraConfiguration : NSObject
/// The flash mode setting for the AR Camera.
/// Determines whether the flash is on, off, or set to auto mode.
@property (nonatomic, readonly) enum TruvideoSdkCameraFlashMode flashMode;
/// The media capture mode for the AR Camera.
/// Defines whether the camera captures photos, videos, or both.
@property (nonatomic, readonly, strong) TruvideoSdkCameraMediaMode * _Nonnull mode;
/// The camera orientation used when capturing AR content.
/// Determines whether the camera operates in portrait or landscape mode.
@property (nonatomic, readonly) enum TruvideoSdkCameraOrientation orientation;
/// Instantiates a new <code>TruvideoSdkARCameraConfiguration</code> using static method syntax.
/// This provides a convenient way to create configurations without directly initializing an instance.
/// \param flashMode The desired flash setting (default: <code>.off</code>).
///
/// \param orientation The camera’s orientation.
///
/// \param mode The media capture mode (default: <code>.videoAndPicture()</code>).
///
///
/// returns:
/// A new <code>TruvideoSdkARCameraConfiguration</code> instance.
+ (TruvideoSdkARCameraConfiguration * _Nonnull)instantiateWith:(enum TruvideoSdkCameraFlashMode)flashMode orientation:(enum TruvideoSdkCameraOrientation)orientation mode:(TruvideoSdkCameraMediaMode * _Nonnull)mode SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIApplication;
@class UIWindow;

/// Defines the application delegate for handling camera-related configurations.
/// <code>TruvideoSdkCameraAppDelegate</code> extends <code>UIApplicationDelegate</code> and provides control over <em>interface orientation lock</em> settings.
/// <h2>Overview</h2>
/// This protocol is responsible for:
/// <ul>
///   <li>
///     <em>Managing the orientation lock</em> for the camera.
///   </li>
///   <li>
///     <em>Defining supported interface orientations</em> for the application.
///   </li>
/// </ul>
/// <h2>Example Usage</h2>
/// \code
/// class AppDelegate: UIResponder, TruvideoSdkCameraAppDelegate {
///     var orientationLock: UIInterfaceOrientationMask = .portrait
///
///     func application(
///         _ application: UIApplication,
///         supportedInterfaceOrientationsFor window: UIWindow?
///     ) -> UIInterfaceOrientationMask {
///         return orientationLock
///     }
/// }
///
/// \endcode
SWIFT_PROTOCOL("_TtP17TruvideoSdkCamera28TruvideoSdkCameraAppDelegate_")
@protocol TruvideoSdkCameraAppDelegate <UIApplicationDelegate>
/// The current orientation lock for the application.
@property (nonatomic) UIInterfaceOrientationMask orientationLock;
/// Determines the supported interface orientations for the application.
/// This method allows the app to specify <em>which orientations</em> are permitted for a given window.
/// \param application The running application instance.
///
/// \param window The main application window.
///
///
/// returns:
/// A <code>UIInterfaceOrientationMask</code> specifying the supported orientations.
- (UIInterfaceOrientationMask)application:(UIApplication * _Nonnull)application supportedInterfaceOrientationsForWindow:(UIWindow * _Nullable)window SWIFT_WARN_UNUSED_RESULT;
@end

enum TruvideoSdkCameraLensFacing : NSInteger;
@class NSString;
enum TruvideoSdkCameraImageFormat : NSInteger;
@class TruvideoSdkCameraResolution;

/// A configuration object for setting up the camera in <code>TruvideoSdkCamera</code>.
/// <code>TruvideoSdkCameraConfiguration</code> allows developers to customize the camera’s behavior, including <em>lens selection, flash settings, orientation, resolution management, and media output</em>.
/// <h2>Example Usage</h2>
/// \code
/// let cameraConfig = TruvideoSdkCameraConfiguration(
///     lensFacing: .back,
///     flashMode: .auto,
///     orientation: .portrait,
///     outputPath: "media_output.mp4",
///     frontResolutions: [],
///     frontResolution: nil,
///     backResolutions: [],
///     backResolution: nil,
///     mode: .videoOnly
/// )
///
/// \endcodeThis configuration can be passed to <code>presentTruvideoSdkCameraView</code> to launch the camera with the specified settings.
/// note:
/// If no orientation is provided, the default device orientation will be used.
/// <h2>See Also</h2>
/// <ul>
///   <li>
///     <code>TruvideoSdkCameraLensFacing</code>
///   </li>
///   <li>
///     <code>TruvideoSdkCameraFlashMode</code>
///   </li>
///   <li>
///     <code>TruvideoSdkCameraOrientation</code>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC17TruvideoSdkCamera30TruvideoSdkCameraConfiguration")
@interface TruvideoSdkCameraConfiguration : NSObject
/// The selected camera lens facing mode.
/// Determines whether the <em>front</em> or <em>rear</em> camera is used for media capture.
@property (nonatomic, readonly) enum TruvideoSdkCameraLensFacing lensFacing;
/// The flash mode setting for the camera.
/// Determines whether the <em>flash is enabled or disabled</em> during capture.
@property (nonatomic, readonly) enum TruvideoSdkCameraFlashMode flashMode;
/// The camera orientation used when capturing media.
/// Specifies whether the camera operates in <em>portrait or landscape mode</em>.
@property (nonatomic, readonly) enum TruvideoSdkCameraOrientation orientation;
/// The output file path where the recorded media will be saved.
/// Defines the storage location of the <em>captured photos or recorded videos</em>.
@property (nonatomic, readonly, copy) NSString * _Nonnull outputPath;
/// Defines the camera’s capture mode.
/// Determines whether the camera captures <em>photos, videos, or both</em>.
@property (nonatomic, readonly, strong) TruvideoSdkCameraMediaMode * _Nonnull mode;
/// Defines the camera’s capture mode.
/// Determines whether the camera captures <em>photos, videos, or both</em>.
@property (nonatomic) BOOL isHighResolutionPhotoEnabled;
/// Defines the camera’s UI
/// Determines whether the camera will be presented with the new or legacy UI design
@property (nonatomic) BOOL isNewLayoutEnabled;
/// Defines the camera’s photo output file format
/// Determines wether the output file format is <em>png or jpeg</em>
@property (nonatomic) enum TruvideoSdkCameraImageFormat imageFormat;
/// Defines behavior when moving to background
/// Pauses the the recording when moving to background and concatenate them at the end using FFMPEG
@property (nonatomic) BOOL pauseVideoWhenMovingToBackground;
/// Instantiates a new <code>TruvideoSdkCameraConfiguration</code> using static method syntax.
///
/// returns:
/// A new <code>TruvideoSdkCameraConfiguration</code> instance.
+ (TruvideoSdkCameraConfiguration * _Nonnull)instantiateWith:(enum TruvideoSdkCameraLensFacing)lensFacing flashMode:(enum TruvideoSdkCameraFlashMode)flashMode orientation:(enum TruvideoSdkCameraOrientation)orientation outputPath:(NSString * _Nonnull)outputPath frontResolutions:(NSArray<TruvideoSdkCameraResolution *> * _Nonnull)frontResolutions frontResolution:(TruvideoSdkCameraResolution * _Nullable)frontResolution backResolutions:(NSArray<TruvideoSdkCameraResolution *> * _Nonnull)backResolutions backResolution:(TruvideoSdkCameraResolution * _Nullable)backResolution mode:(TruvideoSdkCameraMediaMode * _Nonnull)mode imageFormat:(enum TruvideoSdkCameraImageFormat)imageFormat SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class TruvideoSdkCameraInformation;

/// Defines the delegate responsible for retrieving camera information.
/// The <code>TruvideoSdkCameraDelegate</code> allows applications to fetch camera details, such as available lenses,
/// supported resolutions, and hardware capabilities.
/// <h2>Example Usage</h2>
/// \code
/// let cameraInfo = TruvideoSdkCameraProvider.shared.camera.getTruvideoSdkCameraInformation()
///
/// \endcode
SWIFT_PROTOCOL("_TtP17TruvideoSdkCamera25TruvideoSdkCameraDelegate_")
@protocol TruvideoSdkCameraDelegate
/// Retrieves all available camera information for both <em>front</em> and <em>back</em> cameras.
///
/// returns:
/// A <code>TruvideoSdkCameraInformation</code> object containing detailed camera specifications.
- (TruvideoSdkCameraInformation * _Nonnull)getTruvideoSdkCameraInformation SWIFT_WARN_UNUSED_RESULT;
@end


/// Represents a camera device available on the system.
/// <code>TruvideoSdkCameraDevice</code> provides details about a specific camera, including its <em>ID, lens direction, supported resolutions, flash availability, and sensor orientation</em>.
/// <h2>Example Usage</h2>
/// \code
/// let backCamera = TruvideoSdkCameraDevice(
///     id: "com.truvideo.backcamera",
///     lensFacing: .back,
///     resolutions: [TruvideoSdkCameraResolution(width: 1920, height: 1080)],
///     withFlash: true,
///     isTapToFocusEnabled: true,
///     sensorOrientation: 90
/// )
///
/// \endcode
SWIFT_CLASS("_TtC17TruvideoSdkCamera23TruvideoSdkCameraDevice")
@interface TruvideoSdkCameraDevice : NSObject
/// The unique identifier of the camera device.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The lens direction of the camera.
/// Specifies whether the camera is <em>front-facing</em> or <em>back-facing</em>.
@property (nonatomic, readonly) enum TruvideoSdkCameraLensFacing lensFacing;
/// The list of supported resolutions for this camera device.
/// Each resolution represents a width-height pair that defines the camera’s image capture capabilities.
@property (nonatomic, readonly, copy) NSArray<TruvideoSdkCameraResolution *> * _Nonnull resolutions;
/// Indicates whether the camera device has a built-in flash.
@property (nonatomic, readonly) BOOL withFlash;
/// Indicates whether the camera supports tap-to-focus functionality.
@property (nonatomic, readonly) BOOL isTapToFocusEnabled;
/// The sensor orientation of the camera, in degrees.
/// Represents the natural orientation of the camera sensor relative to the device’s display.
@property (nonatomic, readonly) NSInteger sensorOrientation;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Defines the flash mode settings for the camera.
/// This enum specifies whether the camera <em>flash is enabled or disabled</em>.
/// <h2>Available Values</h2>
/// <ul>
///   <li>
///     <code>off</code>: <em>Flash is disabled</em>.
///   </li>
///   <li>
///     <code>on</code>: <em>Flash is always enabled</em>.
///   </li>
/// </ul>
/// <h2>Example Usage</h2>
/// \code
/// let cameraConfig = TruvideoSdkCameraConfiguration(
///     flashMode: .on
/// )
///
/// \endcode
typedef SWIFT_ENUM(NSInteger, TruvideoSdkCameraFlashMode, open) {
/// Flash is disabled.
  TruvideoSdkCameraFlashModeOff = 0,
/// Flash is always enabled.
  TruvideoSdkCameraFlashModeOn = 1,
};

/// Defines the output photo’s file format.
/// This enum specifies whether the photo output file format is <em>png or jpeg</em>.
/// <h2>Available Values</h2>
/// <ul>
///   <li>
///     <code>png</code>: <em>Output file format is set to png</em>.
///   </li>
///   <li>
///     <code>jpeg</code>: <em>Output file format is set to jpeg</em>.
///   </li>
/// </ul>
/// <h2>Example Usage</h2>
/// \code
/// let cameraConfig = TruvideoSdkCameraConfiguration(
///     imageFormat: .png
/// )
///
/// \endcode
typedef SWIFT_ENUM(NSInteger, TruvideoSdkCameraImageFormat, open) {
  TruvideoSdkCameraImageFormatJpeg = 0,
  TruvideoSdkCameraImageFormatPng = 1,
};


/// Provides detailed information about available camera devices.
/// <code>TruvideoSdkCameraInformation</code> contains references to the <em>front-facing</em> and <em>back-facing</em> cameras available on the device.
/// <h2>Example Usage</h2>
/// \code
/// let cameraInfo = TruvideoSdkCameraInformation(frontCamera: frontDevice, backCamera: backDevice)
/// print("Front Camera ID: \(cameraInfo.frontCamera?.id ?? "N/A")")
///
/// \endcode
SWIFT_CLASS("_TtC17TruvideoSdkCamera28TruvideoSdkCameraInformation")
@interface TruvideoSdkCameraInformation : NSObject
/// The front-facing camera device, if available.
@property (nonatomic, readonly, strong) TruvideoSdkCameraDevice * _Nullable frontCamera;
/// The back-facing camera device, if available.
@property (nonatomic, readonly, strong) TruvideoSdkCameraDevice * _Nullable backCamera;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Defines the interface for accessing <code>TruvideoSdkCamera</code> functionalities.
/// The <code>TruvideoSdkCameraInterface</code> provides access to core camera functionality, including
/// retrieving available cameras and configuring the SDK.
/// <h2>Example Usage</h2>
/// \code
/// let sdkCamera = TruvideoSdkCameraProvider.shared
/// sdkCamera.configureTruvideoSdkAppDelegate(myAppDelegate)
///
/// \endcode
SWIFT_PROTOCOL("_TtP17TruvideoSdkCamera26TruvideoSdkCameraInterface_")
@protocol TruvideoSdkCameraInterface
/// Provides the main camera delegate, responsible for handling SDK camera operations.
@property (nonatomic, readonly, strong) id <TruvideoSdkCameraDelegate> _Nonnull camera;
/// Configures the Truvideo SDK with an application delegate.
/// This method should be called during application setup to <em>initialize the camera SDK</em>.
/// \param appDelegate The <code>TruvideoSdkCameraAppDelegate</code> instance handling app-wide camera events.
///
- (void)configureTruvideoSdkAppDelegate:(id <TruvideoSdkCameraAppDelegate> _Nonnull)appDelegate;
@end

/// Defines the camera lens direction used for capturing media.
/// This enum specifies whether the camera is using the <em>front-facing</em> or <em>back-facing</em> lens.
/// <h2>Available Values</h2>
/// <ul>
///   <li>
///     <code>back</code>: Uses the <em>rear-facing</em> camera.
///   </li>
///   <li>
///     <code>front</code>: Uses the <em>front-facing</em> camera (selfie mode).
///   </li>
/// </ul>
/// <h2>Example Usage</h2>
/// \code
/// let cameraConfig = TruvideoSdkCameraConfiguration(
///     lensFacing: .back,
///     flashMode: .off,
///     orientation: .portrait,
///     outputPath: "video_output.mp4",
///     frontResolutions: [],
///     frontResolution: nil,
///     backResolutions: [],
///     backResolution: nil,
///     mode: .videoOnly
/// )
///
/// \endcode
typedef SWIFT_ENUM(NSInteger, TruvideoSdkCameraLensFacing, open) {
/// Uses the rear-facing camera.
  TruvideoSdkCameraLensFacingBack = 0,
/// Uses the front-facing camera (selfie mode).
  TruvideoSdkCameraLensFacingFront = 1,
};

enum TruvideoSdkCameraMediaType : NSInteger;

/// A class representing a media file captured by the Truvideo SDK camera.
/// <code>TruvideoSdkCameraMedia</code> stores details about recorded videos or captured photos,
/// including their file paths, timestamps, media type, camera lens information, orientation, resolution,
/// and duration. It conforms to <code>Encodable</code> to allow JSON serialization.
/// note:
/// This class is designed to work with Objective-C (<code>@objc</code>) and Swift.
SWIFT_CLASS("_TtC17TruvideoSdkCamera22TruvideoSdkCameraMedia")
@interface TruvideoSdkCameraMedia : NSObject
/// The timestamp when the media was created.
@property (nonatomic, readonly) double createdAt;
/// The file path where the media is stored.
@property (nonatomic, readonly, copy) NSString * _Nonnull filePath;
/// The type of media (e.g., video clip or photo).
@property (nonatomic, readonly) enum TruvideoSdkCameraMediaType type;
/// The camera lens facing direction when the media was captured.
@property (nonatomic, readonly) enum TruvideoSdkCameraLensFacing cameraLensFacing;
/// The orientation (rotation) of the camera when the media was captured.
@property (nonatomic, readonly) enum TruvideoSdkCameraOrientation rotation;
/// The resolution of the captured media.
@property (nonatomic, readonly, strong) TruvideoSdkCameraResolution * _Nonnull resolution;
/// The duration of the media in milliseconds.
/// note:
/// This is applicable only for video clips.
@property (nonatomic, readonly) int64_t duration;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSNumber;

SWIFT_CLASS("_TtC17TruvideoSdkCamera26TruvideoSdkCameraMediaMode")
@interface TruvideoSdkCameraMediaMode : NSObject
+ (TruvideoSdkCameraMediaMode * _Nonnull)NSVideoAndPictureWithVideoCount:(NSNumber * _Nullable)videoCount pictureCount:(NSNumber * _Nullable)pictureCount videoDuration:(NSNumber * _Nullable)videoDuration SWIFT_WARN_UNUSED_RESULT;
+ (TruvideoSdkCameraMediaMode * _Nonnull)NSSingleVideoWithVideoDuration:(NSNumber * _Nullable)videoDuration SWIFT_WARN_UNUSED_RESULT;
+ (TruvideoSdkCameraMediaMode * _Nonnull)NSSinglePicture SWIFT_WARN_UNUSED_RESULT;
+ (TruvideoSdkCameraMediaMode * _Nonnull)NSSingleVideoOrPictureWithVideoDuration:(NSNumber * _Nullable)videoDuration SWIFT_WARN_UNUSED_RESULT;
+ (TruvideoSdkCameraMediaMode * _Nonnull)NSVideoWithVideoCount:(NSNumber * _Nullable)videoCount videoDuration:(NSNumber * _Nullable)videoDuration SWIFT_WARN_UNUSED_RESULT;
+ (TruvideoSdkCameraMediaMode * _Nonnull)NSPictureWithPictureCount:(NSNumber * _Nullable)pictureCount SWIFT_WARN_UNUSED_RESULT;
+ (TruvideoSdkCameraMediaMode * _Nonnull)NSVideoAndPictureWithMediaCount:(NSNumber * _Nonnull)mediaCount videoDuration:(NSNumber * _Nullable)videoDuration SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// An enumeration representing the different media types supported by the Truvideo SDK camera.
/// <code>TruvideoSdkCameraMediaType</code> conforms to <code>Codable</code> and <code>RawRepresentable</code>, allowing it to be
/// encoded and decoded from JSON. The raw values are stored as <code>String</code> representations.
typedef SWIFT_ENUM(NSInteger, TruvideoSdkCameraMediaType, open) {
/// The media type representing a recorded video clip.
  TruvideoSdkCameraMediaTypeClip = 0,
/// The media type representing a captured photo.
  TruvideoSdkCameraMediaTypePhoto = 1,
};

/// Defines the camera orientation for media capture.
/// This enum specifies whether the camera operates in <em>portrait or landscape mode</em>.
/// <h2>Available Values</h2>
/// <ul>
///   <li>
///     <code>portrait</code>: <em>Upright portrait mode</em>.
///   </li>
///   <li>
///     <code>landscapeLeft</code>: <em>Landscape mode with the device rotated left</em>.
///   </li>
///   <li>
///     <code>landscapeRight</code>: <em>Landscape mode with the device rotated right</em>.
///   </li>
///   <li>
///     <code>portraitReverse</code>: <em>Upside-down portrait mode</em>.
///   </li>
/// </ul>
/// <h2>Automatic Orientation Detection</h2>
/// If no orientation is explicitly set, the system will determine the <em>current device orientation</em>.
/// \code
/// let orientation = TruvideoSdkCameraOrientation.currentOrientation
///
/// \endcode
typedef SWIFT_ENUM(NSInteger, TruvideoSdkCameraOrientation, open) {
/// Upright portrait mode.
  TruvideoSdkCameraOrientationPortrait = 0,
/// Landscape mode with the device rotated left.
  TruvideoSdkCameraOrientationLandscapeLeft = 1,
/// Landscape mode with the device rotated right.
  TruvideoSdkCameraOrientationLandscapeRight = 2,
/// Upside-down portrait mode.
  TruvideoSdkCameraOrientationPortraitReverse = 3,
};


/// Provides a shared instance for accessing <code>TruvideoSdkCamera</code> functionalities.
/// <code>TruvideoSdkCameraProvider</code> acts as a singleton, offering a centralized way to access the <em>Truvideo Camera SDK</em>.
/// <h2>Example Usage</h2>
/// \code
/// let cameraInstance = TruvideoSdkCameraProvider.shared
/// let cameraInfo = cameraInstance.getTruvideoSdkCameraInformation()
///
/// \endcode
SWIFT_CLASS("_TtC17TruvideoSdkCamera25TruvideoSdkCameraProvider")
@interface TruvideoSdkCameraProvider : NSObject
/// The shared instance for accessing <code>TruvideoSdkCamera</code> functionalities.
/// This instance provides access to all SDK camera features.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) id <TruvideoSdkCameraInterface> _Nonnull shared;)
+ (id <TruvideoSdkCameraInterface> _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17TruvideoSdkCamera27TruvideoSdkCameraResolution")
@interface TruvideoSdkCameraResolution : NSObject
@property (nonatomic, readonly) int32_t width;
@property (nonatomic, readonly) int32_t height;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A result of the recording session.
SWIFT_CLASS("_TtC17TruvideoSdkCamera23TruvideoSdkCameraResult")
@interface TruvideoSdkCameraResult : NSObject
/// The media recorded during the session.
@property (nonatomic, readonly, copy) NSArray<TruvideoSdkCameraMedia *> * _Nonnull media;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum TruvideoSdkCameraScannerCodeFormat : NSInteger;

/// Represents the result of a barcode or QR code scan.
/// The <code>TruvideoSdkCameraScannerCode</code> class contains <em>raw barcode data</em> and its associated <em>format type</em>.
/// <h2>Overview</h2>
/// When a barcode or QR code is scanned using the <em>Truvideo Scanner Camera</em>, this class stores:
/// <ul>
///   <li>
///     The <em>scanned code’s data</em> (<code>data</code>)
///   </li>
///   <li>
///     The <em>format of the scanned barcode</em> (<code>format</code>)
///   </li>
/// </ul>
/// <h2>Example Usage</h2>
/// \code
/// let scannedCode = TruvideoSdkCameraScannerCode(data: "123456789", format: .codeQR)
/// print("Scanned Data: \(scannedCode.data)")
/// print("Format: \(scannedCode.format)")
///
/// \endcode
SWIFT_CLASS("_TtC17TruvideoSdkCamera28TruvideoSdkCameraScannerCode")
@interface TruvideoSdkCameraScannerCode : NSObject
/// The raw data extracted from the scanned barcode.
@property (nonatomic, readonly, copy) NSString * _Nonnull data;
/// The type of barcode that was scanned.
@property (nonatomic, readonly) enum TruvideoSdkCameraScannerCodeFormat format;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Defines the supported barcode and QR code formats for the scanner.
/// <code>TruvideoSdkCameraScannerCodeFormat</code> provides the available barcode types that the <em>Truvideo Scanner Camera</em> can detect.
/// <h2>Supported Formats</h2>
/// <ul>
///   <li>
///     <code>code39</code>: <em>Code-39 barcode</em> (commonly used in logistics and inventory systems)
///   </li>
///   <li>
///     <code>code93</code>: <em>Code-93 barcode</em> (an extended version of Code-39 with higher data density)
///   </li>
///   <li>
///     <code>codeQR</code>: <em>QR Code</em> (widely used for mobile transactions, payments, and URLs)
///   </li>
///   <li>
///     <code>dataMatrix</code>: <em>DataMatrix Code</em> (used in packaging, manufacturing, and tracking applications)
///   </li>
/// </ul>
/// <h2>Example Usage</h2>
/// \code
/// let scannerConfig = TruvideoSdkScannerCameraConfiguration(
///     flashMode: .auto,
///     codeFormats: [.codeQR, .dataMatrix]
/// )
///
/// \endcode
typedef SWIFT_ENUM(NSInteger, TruvideoSdkCameraScannerCodeFormat, open) {
/// Code-39 barcode format.
  TruvideoSdkCameraScannerCodeFormatCode39 = 0,
/// Code-93 barcode format.
  TruvideoSdkCameraScannerCodeFormatCode93 = 1,
/// QR Code format.
  TruvideoSdkCameraScannerCodeFormatCodeQR = 2,
/// DataMatrix barcode format.
  TruvideoSdkCameraScannerCodeFormatDataMatrix = 3,
};


/// Configuration settings for the <em>Truvideo Scanner Camera</em>.
/// This class allows developers to customize <em>flash mode, orientation, supported barcode types, and validation rules</em>.
/// <h2>Example Usage</h2>
/// \code
/// let scannerConfig = TruvideoSdkScannerCameraConfiguration(
///     flashMode: .auto,
///     orientation: .portrait,
///     codeFormats: [.codeQR, .dataMatrix],
///     autoClose: true
/// )
///
/// \endcode
SWIFT_CLASS("_TtC17TruvideoSdkCamera37TruvideoSdkScannerCameraConfiguration")
@interface TruvideoSdkScannerCameraConfiguration : NSObject
/// Specifies whether the <em>flash</em> is enabled during scanning.
@property (nonatomic, readonly) enum TruvideoSdkCameraFlashMode flashMode;
/// Defines the <em>camera orientation</em> during scanning.
@property (nonatomic, readonly) enum TruvideoSdkCameraOrientation orientation;
/// Determines whether the scanner <em>automatically closes</em> after a successful scan.
@property (nonatomic, readonly) BOOL autoClose;
/// Creates a scanner configuration with default settings.
/// \param flashMode The desired flash mode.
///
/// \param orientation The camera orientation.
///
/// \param autoClose Whether to automatically close after a scan.
///
///
/// returns:
/// A new scanner configuration instance.
+ (TruvideoSdkScannerCameraConfiguration * _Nonnull)instantiateWith:(enum TruvideoSdkCameraFlashMode)flashMode orientation:(enum TruvideoSdkCameraOrientation)orientation autoClose:(BOOL)autoClose SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end










@interface UIViewController (SWIFT_EXTENSION(TruvideoSdkCamera))
/// Presents the Scanner Camera view in full-screen mode.
/// This method displays the <em>TruvideoSdkScannerCamera</em>, allowing users to scan barcodes and QR codes.
/// \param preset A <code>TruvideoSdkCameraConfiguration</code> object that defines the configuration for the camera.
///
/// \param onComplete A callback function that receives a <code>TruvideoSdkCameraScannerCode</code> containing the scanned barcode data.
///
- (void)presentTruvideoSdkScannerCameraViewWithPreset:(TruvideoSdkScannerCameraConfiguration * _Nonnull)preset onComplete:(void (^ _Nonnull)(TruvideoSdkCameraScannerCode * _Nullable))onComplete;
@end


@interface UIViewController (SWIFT_EXTENSION(TruvideoSdkCamera))
/// Presents the Standard Camera view in full-screen mode.
/// This method displays the <em>TruvideoSdkCamera</em>, allowing users to <em>capture photos and record videos</em> based on the provided
/// camera configuration.
/// \param preset A <code>TruvideoSdkCameraConfiguration</code> object that defines the configuration for the camera.
///
/// \param onComplete A callback function that receives a <code>TruvideoSdkCameraResult</code> containing captured media.
///
- (void)presentTruvideoSdkCameraViewWithPreset:(TruvideoSdkCameraConfiguration * _Nonnull)preset onComplete:(void (^ _Nonnull)(TruvideoSdkCameraResult * _Nonnull))onComplete;
@end


@interface UIViewController (SWIFT_EXTENSION(TruvideoSdkCamera))
/// Presents the AR camera view over the full screen.
/// The camera view is presented <em>modally in full screen</em>, and once the session ends, the result is passed back to the caller.
/// \param preset A <code>TruvideoSdkARCameraConfiguration</code> object containing the AR camera configuration.
///
/// \param onComplete A callback function that receives a <code>TruvideoSdkCameraResult</code> containing captured media.
///
- (void)presentTruvideoSdkARCameraViewWithPreset:(TruvideoSdkARCameraConfiguration * _Nonnull)preset onComplete:(void (^ _Nonnull)(TruvideoSdkCameraResult * _Nonnull))onComplete;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
